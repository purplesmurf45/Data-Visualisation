# -*- coding: utf-8 -*-
"""single_variate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7XdKHlnqOj5DIRfhpbwejGlxYO7vLbH
"""

import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import plotly.graph_objects as go
from scipy.spatial.distance import pdist
!pip install seriate
from seriate import seriate

data = np.loadtxt('/content/drive/MyDrive/IMT2018050_Datathon3/datasets/bio-diseasome.mtx')

nodes = []
edges = []

#listing all nodes and edges
for edge in data[1:]:
    nodes.append(int(edge[0])) 
    nodes.append(int(edge[1]))
    edges.append((int(edge[0]),int(edge[1])))
#removing duplicate nodes
nodes = list(set(nodes))

#initializing graph and adding nodes and edges to it
graph = nx.Graph()
for node in nodes:
  graph.add_node(node)
for edge in edges:
  graph.add_edge(*edge)

def get_trace (graph, edges, nlayout):
  x_node = [nlayout[k+1][0] for k in range(516)]
  y_node = [nlayout[k+1][1] for k in range(516)]
  node_trace = go.Scatter(  x = x_node,
                            y = y_node,
                            mode = 'markers',
                            hoverinfo = 'text',
                            ids = nodes,
                            marker = dict(  showscale = True,
                                            colorscale = 'jet',
                                            reversescale = True,
                                            size = 10,
                                            colorbar = dict(
                                                thickness = 15,
                                                title = 'Degree of Node',
                                                xanchor = 'left',
                                                titleside = 'right'
                                            ),
                                            line_width = 2))
  
  x_edge = []
  y_edge = []
  for edge in edges:
      x_edge += [nlayout[edge[0]][0], nlayout[edge[1]][0], None]
      y_edge += [nlayout[edge[0]][1], nlayout[edge[1]][1], None]

  edge_trace = go.Scatter(  x = x_edge,
                            y = y_edge,
                            line = dict(width = 0.5, color = '#888'),
                            hoverinfo = 'none',
                            mode = 'lines')
  
  return node_trace, edge_trace


def get_node_link_diagram(graph, edges, nlayout, title):
  node_trace, edge_trace = get_trace (graph, edges, nlayout)
  node_adjacencies = []
  node_text = []
  for node, adjacencies in enumerate(graph.adjacency()):
      node_adjacencies.append(len(adjacencies[1]))
      node_text.append(node)
  node_trace.text = node_text    
  node_trace.marker.color = node_adjacencies
  fig = go.Figure(  data = [edge_trace, node_trace],
                    layout = go.Layout(
                        title = "<br>"+title,
                        titlefont_size = 20,
                        width = 1000,
                        height = 500,
                        showlegend = False,
                        hovermode = 'closest',
                        margin = dict(b = 5, l = 5, r = 5, t = 5),
                        xaxis = dict(showgrid = False, zeroline = False, showticklabels = False),
                        yaxis = dict(showgrid = False, zeroline = False, showticklabels = False))
                        )
  fig.show()
  fig.write_html(title + ".html")

get_node_link_diagram(graph, edges, nx.spring_layout(graph), "Force_Directed_Fruchterman_Reingold_Visualization")
get_node_link_diagram(graph, edges, nx.kamada_kawai_layout(graph), "Force_Directed_Kamada_Kawai_Visualization")
get_node_link_diagram(graph, edges, nx.circular_layout(graph), "Circular_Node_Link_Visualisation")

def get_adjacency_matrix(graph):
  matrix = nx.to_numpy_matrix(graph)
  node_list = [i+1 for i in seriate(pdist(matrix))]
  adjacency_matrix = nx.to_numpy_matrix(graph, nodelist = node_list)

  X = [i for i in range(516)]
  Y = [i for i in range(516)]
  fig = go.Figure(data = go.Heatmap(z = adjacency_matrix,
                                    x = X,
                                    y = Y,
                                    type = 'heatmap'),
                  layout = go.Layout(title = 'Adjacency Matrix Layout',
                                     titlefont_size = 20,
                                     width = 1000,
                                     height = 500,
                                     showlegend = False,
                                     hovermode = 'closest')
                  )
  fig.show()
  fig.write_html("matrix.html")

get_adjacency_matrix(graph)

