# -*- coding: utf-8 -*-
"""multi_variate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5hLCZ6uir3oSRzPA7yphZGjtZHP3f-w
"""

import numpy as np
import pandas as pd
import plotly.express as px
!pip install --upgrade plotly
from sklearn.preprocessing import LabelEncoder as LE

data = pd.read_csv('/content/drive/MyDrive/IMT2018050_Datathon3/datasets/AH_Sickle_Cell_Disease_Provisional_Death_Counts_2019-2021.csv')

def get_treemap(data, value, title):
  fig = px.treemap(data, path=[px.Constant("Age Group"),'Date of Death Year','Race or Hispanic Origin','Age Group'], title = title,values=value,color='Age Group')
  fig.update_layout(title_font_size = 25, margin = dict(l=25, r=25))
  fig.show()
  fig.write_html(title + ".html")

get_treemap(data, "SCD_Underlying", "Deaths_SCD_Underlying")
get_treemap(data, "SCD_Multi", "Deaths_SCD_Multi")
get_treemap(data, "SCD and COVID-19", "Deaths_SCD_COVID")



#**************************PARALLEL PLOTS*****************************************


under_data = data[["Date of Death Year", "Quarter", "Race or Hispanic Origin", "Age Group", "SCD_Underlying"]]
multi_data = data[["Date of Death Year", "Quarter", "Race or Hispanic Origin", "Age Group", "SCD_Multi"]]
covid_data = data[["Date of Death Year", "Quarter", "Race or Hispanic Origin", "Age Group", "SCD and COVID-19"]]


# Label Encoding
le1 = LE()
le1.fit(under_data['Race or Hispanic Origin'])

under_data['Race or Hispanic Origin'] = le1.transform(under_data["Race or Hispanic Origin"])
multi_data['Race or Hispanic Origin'] = le1.transform(multi_data["Race or Hispanic Origin"])
covid_data['Race or Hispanic Origin'] = le1.transform(covid_data["Race or Hispanic Origin"])

le2 = LE()
le2.fit(under_data['Age Group'])

under_data['Age Group'] = le2.transform(under_data["Age Group"])
multi_data['Age Group'] = le2.transform(multi_data["Age Group"])
covid_data['Age Group'] = le2.transform(covid_data["Age Group"])

#for label assignments
print(le1.inverse_transform([0,1,2]))
print(le2.inverse_transform([0, 1, 2, 3, 4, 5, 6]))

def get_parallel_coord_plot(data, value, title):
  fig = px.parallel_coordinates(data, color = value, color_continuous_scale = px.colors.sequential.Bluered, color_continuous_midpoint = 3)
  fig.show()
  fig.write_html(title)

get_parallel_coord_plot(under_data, 'SCD_Underlying', 'parallel_plot_SCD_Underlying.html')
get_parallel_coord_plot(multi_data, 'SCD_Multi', 'parallel_plot_SCD_Multi.html')
get_parallel_coord_plot(covid_data, 'SCD and COVID-19', 'parallel_plot_SCD_COVID.html')


